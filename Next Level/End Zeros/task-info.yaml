type: checkiO
files:
- name: mission.py
  visible: true
  text: "def end_zeros(num: int) -> int:\n    \"\"\" find out how many zeros a given\
    \ number has at the end \n    How it works:\n    -------------\n    Find the first\
    \ non-zero while looping to the inverse string \n     representation of the number\n\
    \    \"\"\"\n    zero_count = 0\n    for c in str(num)[::-1]:  \n        if c\
    \ != \"0\":\n            break\n        zero_count += 1\n    return zero_count\n\
    \n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(end_zeros(0))\n\
    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n\
    \    assert end_zeros(0) == 1\n    assert end_zeros(1) == 0\n    assert end_zeros(10)\
    \ == 1\n    assert end_zeros(101) == 0\n    assert end_zeros(245) == 0\n    assert\
    \ end_zeros(100100) == 2\n    print(\"Coding complete? Click 'Check' to earn cool\
    \ rewards!\")\n"
  learner_created: false
status: Solved
code: "def end_zeros(num: int) -> int:\n    \"\"\" find out how many zeros a given\
  \ number has at the end \n    How it works:\n    -------------\n    Find the first\
  \ non-zero while looping to the inverse string \n     representation of the number\n\
  \    \"\"\"\n    zero_count = 0\n    for c in str(num)[::-1]:  \n        if c !=\
  \ \"0\":\n            break\n        zero_count += 1\n    return zero_count\n\n\n\
  if __name__ == '__main__':\n    print(\"Example:\")\n    print(end_zeros(0))\n\n\
  \    # These \"asserts\" are used for self-checking and not for an auto-testing\n\
  \    assert end_zeros(0) == 1\n    assert end_zeros(1) == 0\n    assert end_zeros(10)\
  \ == 1\n    assert end_zeros(101) == 0\n    assert end_zeros(245) == 0\n    assert\
  \ end_zeros(100100) == 2\n    print(\"Coding complete? Click 'Check' to earn cool\
  \ rewards!\")\n"
seconds_from_change: 87508
