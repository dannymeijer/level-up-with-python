{
  "summary" : "Introduction course to Python.",
  "title" : "Level Up with Python",
  "authors" : [
    "Dmeij1"
  ],
  "programming_language" : "Python",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "01_Introduction",
      "task_list" : [
        {
          "name" : "Our first program",
          "files" : {
            "tests.py" : {
              "name" : "tests.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "from lessons.test_helper import run_common_tests, failed, passed, get_answer_placeholders\n\n\ndef test_initial():\n    window = get_answer_placeholders()[0]\n    if window == \"type your name\":\n        failed(\"You should modify the file\")\n    else:\n        passed()\n\nif __name__ == '__main__':\n    run_common_tests(\"You should enter your name\")\n    test_initial()\n\n\n"
            },
            "execute.svg" : {
              "name" : "execute.svg",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "<svg height=\"16\" viewBox=\"0 0 16 16\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m4 2 10 6-10 6z\" fill=\"#59a869\" fill-rule=\"evenodd\"/></svg>"
            },
            "hello_world.py" : {
              "name" : "hello_world.py",
              "placeholders" : [
                {
                  "offset" : 32,
                  "length" : 14,
                  "possible_answer" : "<type your nam",
                  "placeholder_text" : "type your name"
                }
              ],
              "is_visible" : true,
              "text" : "print(\"Hello, world! My name is type your namee>\")\n"
            }
          },
          "description_text" : "",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Comments",
          "files" : {
            "comments.py" : {
              "name" : "comments.py",
              "placeholders" : [
                {
                  "offset" : 138,
                  "length" : 20,
                  "possible_answer" : "add new comment here",
                  "placeholder_text" : "add new comment here"
                }
              ],
              "is_visible" : true,
              "text" : "# This is the comment for the comments.py file\nprint(\"Hello!\")  # this comment is for the second line\n\nprint(\"# this is not a comment\")\n# add new comment here\n"
            },
            "tests.py" : {
              "name" : "tests.py",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "from lessons.test_helper import run_common_tests\n\nif __name__ == '__main__':\n    run_common_tests(\"You should type new comment\")\n"
            }
          },
          "description_text" : "",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "docs/index.html",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "Hello World\n"
    },
    {
      "name" : "LICENSE",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "MIT License\n\nCopyright (c) 2020 Danny Meijer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
    },
    {
      "name" : "main.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "# This is a sample Python script.\n\n# Press ⌃R to execute it or replace it with your code.\n# Press Double ⇧ to search everywhere for classes, files, tool windows, actions, and settings.\n\n\ndef print_hi(name):\n    # Use a breakpoint in the code line below to debug your script.\n    print(f'Hi, {name}')  # Press ⌘F8 to toggle the breakpoint.\n\n\n# Press the green button in the gutter to run the script.\nif __name__ == '__main__':\n    print_hi('PyCharm')\n\n# See PyCharm help at https://www.jetbrains.com/help/pycharm/\n"
    },
    {
      "name" : "sections/Home.md",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "# Welcome to the level-up-with-python wiki!\n"
    },
    {
      "name" : "sections/_Sidebar.md",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "Sections"
    },
    {
      "name" : "sections/1.1-setting-up/Section-1.1.md",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : " Section 1: setting up!\n===========\n\nThis section explains how to get set up your machine to follow along\n\n\nSetting up (MacOS)\n-----------\nThe first thing you will need to do is setting up your Mac for development. With the following steps you end up with a \nnice and clean development environment that you can further customize to your hearts desire.\n\n - [ ] [`Command Line Tools for Xcode`](https://download.developer.apple.com/Developer_Tools/Command_Line_Tools_for_Xcode_11.5/Command_Line_Tools_for_Xcode_11.5.dmg)  \n    Apple developed Xcode as a developer environment for MacOs. Several of the developer tools we are going to be \n    setting up depend on Xcode. Hence, we will install the `Command Line Tools for Xcode`. It include compilers and \n    other tools that will allow you to build things from source,\n    \n    * Installing `Command Line Tools for Xcode`:\n        * It is available through the _App Store > Updates_\n        * Alternatively, it can be installed manually by running the following in a `terminal` window:\n          ```bash\n          sudo xcode-select --install\n          ```\n    * Once the installation has completed, we can check that everything works OK by running the following command in a \n      terminal window:\n      ```bash\n      git --version\n      ```\n      With this, we are checking that Version Control - i.e. `git` - is installed correctly. With xcode installed, we\n      can proceed with the next steps of settings up our MacOS. \n \n - [ ] [`Homebrew`](https://brew.sh/)  \n    Homebrew calls itself The missing package manager for macOS and is an essential tool for \n    any developer. Once Homebrew is installed, it can be used through the `brew`-command in your terminal.\n    \n    * To install, run the following in a `terminal` window:\n      ```bash\n      sh -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n      ```\n      To be able to use `brew` you need to start a new `terminal` session.\n     \n    * After that you should make sure everything is working by running:\n      ```bash\n      brew doctor\n      ```\n      If everything is good, you should see no warnings, and a message that you are `\"ready to brew!\"`.\n\n - [ ] [`iTerm2`](https://www.iterm2.com/)\n    iTerm2 is a replacement for `MacOs Terminal` and the successor to `iTerm`. `iTerm2` brings the terminal into the \n    modern age with [features](https://www.iterm2.com/features.html) you never knew you always wanted; most notably \n    Split Panes and Autocomplete - but there is so much more! It is free software and you can find the source code on \n    [`Github`](https://github.com/gnachman/iTerm2).\n    \n    * To install, run the following in a `terminal` window:  \n      _(note that we are using `brew` (Homebrew) for this installation)_\n      ```bash\n      brew cask install iterm2\n      ```\n    * You can now close your `terminal` and never look back :)\n\n - [ ] [`zsh`](http://zsh.sourceforge.net/FAQ/zshfaq01.html#l3)\n    The `Z` shell - also known as `zsh` - is a Unix shell that is built on top of `bash` (the default shell for `macOS`)\n    with additional features. It is recommended to use `zsh` over the default `bash` as it is all in all a lot more \n    capable; and once you get used to the more extensive features it provides, there's simply no going back...\n    \n    * To install, run the following command:  \n      ```bash\n      brew install zsh\n      ``` \n    \n - [ ] [`Oh My Zsh`](https://github.com/robbyrussell/oh-my-zsh)  \n    `Oh My Zsh` is an open source, community-driven framework for managing your `zsh` configuration. It comes with a \n    bunch of features out of the box, significantly improving your terminal experience.\n    \n    * To install, run the following command:  \n      ```bash\n      sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n      ```\n    \n    * The installation script should set `zsh` as your default shell. In case it doesn't you can do it manually by \n    running the following:  \n      ```bash\n      chsh -s $(which zsh)\n      ```\n \n - [ ] Configuring and customizing `zsh`  \n    The out-of-the-box configuration of `Oh My Zsh` is very usable but you probably (at some point) want to customize \n    it to suit your needs. The [Official Wiki](https://github.com/robbyrussell/oh-my-zsh/wiki) contains a lot of \n    useful information if you want to deep dive into what you can do with `Oh My Zsh`. I'll cover the basics here.\n     \n    * `Oh My Zsh` and `zsh` store their configuration in a file named `.zshrc` in your `$HOME` directory. You can \n      typically access it by running this command \n      ```bash\n      ~/.zshrc\n      ```\n    \n    * __Plugins__:  \n      `Oh My Zsh plugins` allow you to add functionality of many sorts to your shell just by enabling them. They are \n      each documented in the README file in their respective `plugins/` folder.\n\n      Enable a plugin by adding its name to the plugins array in your `.zshrc` file (found in the $HOME directory)\n      > Note: You'll find a full list of all available plugins on the \n      > [Oh My Zsh Official Wiki](https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins).\n      \n      _Some useful plugins_: \n      \n        * [brew](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/brew): adds several aliases for common brew \n          commands.\n        * [osx](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/osx): provides a few utilities to make life \n          more enjoyable on macOS\n        * [git](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git): git plugin provides many aliases and a \n          few useful functions\n        * [pip](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/pip): adds completion for pip, the Python \n          package manager\n        * [python](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/python): adds several aliases for useful \n          python commands\n        * [colored-man-pages](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/colored-man-pages): adds colors to \n          man pages\n        * [colorize](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/colorize): syntax-highlight file contents \n          of over 300 supported languages and other text formats\n        * [zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting): provides syntax highlighting \n          for zsh, enabling highlighting of commands whilst they are typed\n            * run the following command to install `zsh-syntax-highlighting`\n              ```bash\n              git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n              ```\n        * [zsh-autosuggestions](): suggests commands as you type based on history and completions\n            * run the following command to install `zsh-syntax-highlighting`\n              ```bash\n              git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n              ```\n      \n        Enable any plugin you want by adding its name to the plugins array in the `plugins` section in your \n        `~/.zshrc` file. If you would want to enable all the useful plugins mentioned above, it would look like this:\n        ```bash\n        plugins=(\n            brew \n            osx\n            git \n            pip \n            python \n            colored-man-pages \n            colorize \n            zsh-syntax-highlighting \n            zsh-autosuggestions\n        )\n        ```\n    \n    * __Themes__:  \n      `Oh My Zsh` has [over one hundred and fifty themes](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes) bundled that \n      can be used for customizing the look and feel of your shell. Most of the themes have \n      [screenshots on the wiki](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes). Check them out!\n\n      _Selecting a Theme_:\n      Robby's theme is the default one. It's not the fanciest one; not the simplest one; just the right one (for him).  \n      Once you find a theme that you'd like to use, you will need to edit the `~/.zshrc`-file. You'll see an \n      environment variable (all caps) in there that looks like:\n      ```bash\n      ZSH_THEME=\"robbyrussell\"\n      ```\n      To use a different theme, simply change the value to match the name of your desired theme. For example:\n      ```bash\n      ZSH_THEME=\"agnoster\" # (this is one of the fancy ones)\n      # see https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#agnoster\n      ```\n    \n    * Once you have customized / changed your `~/.zshrc`-file, you need to restart your shell;\n        * you can do this by simply closing and reopening your terminal window\n        * alternatively you can run the following command to force your shell to 'reload':\n          ```bash\n          source ~/.zshrc\n          ```\n\n - [ ] [`Python`](https://www.python.org)  \n    Now we get to finally install [`python 3.8.5`](https://www.python.org/downloads/release/python-385/) using \n    Homebrew.\n    \n    * Run the following command:\n      ```bash\n      brew install python3\n      ```\n    \n    * Confirm python is installed correctly by running the following command:\n      ```bash\n      python3 --version\n      ```\n      You should get a response that looks like this: `Python 3.8.5`\n\n- [ ] Python package manager - i.e. `pip`  \n       \n    To install:  \n    \n    * First we download the required file with this command\n      ```bash\n      curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n      ```\n      \n    * Then, we simply tell python to run this file, which will have it install `pip`\n      ```bash\n      python3 get-pip.py\n      ```\n\n- [ ] kite  \n  Kite is an AI assistant giving developers 'superpowers'.\n  * Go to https://www.kite.com/download/ and follow on-screen instructions\n\n \n### Choosing an IDE\nChoosing the right IDE is very important for an aspiring Python developer.\n\nMy personal preference goes to PyCharm:\n* JetBrains Pycharm\n  JetBrains is most well-known for creating IntelliJ (IDEA), which focuses mostly on JVM development (Java, Kotlin, \n  Scala, etc.). They also offer an IDE for Python Developers; they call it __THE__ IDE for [Python] Developers. \n  \n  My personal favorite feature of PyCharm is how well it integrates your Development Environment, Terminal, Version \n  Control (i.e. GIT), as well as the built-in management for Python virtual environments.\n  \n  Pycharm is available in 3 different versions:\n  * [Professional (Free trial)](https://www.jetbrains.com/pycharm/download/#section=mac)   \n      Comes with the most extensive features. Meant for both Scientific and Web Python development. With support for \n      HTML, JS, and SQL.\n  * [Community Edition (Free, open-source) - a.k.a. CE](https://www.jetbrains.com/pycharm/download/#section=mac)  \n      For pure Python development. Although very feature rich, some of the more exclusive features from the \n      Professional version are missing. The Community Edition is recommended for the beginner levels; when first \n      learning Python, you will not \n  * [Educational (Free, open-source) - a.k.a. Edu](https://www.jetbrains.com/pycharm-edu/)  \n      A Professional Tool to Learn and Teach Programming with Python\n\nThere are several options for IDEs.\n * Sublime Text\n * Microsoft Visual Studio Code\n * Microsoft Visual Studio\n * Atom\n * JetBrains IntelliJ IDEA\n * Notepad++ (Windows OS only)\n * VIM\n * Eclipse\n * Xcode\n * iPython / Jupyter\n"
    },
    {
      "name" : "sections/1.2-what-is-python/Section-1.2.md",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "What is Python?\n==============\n\n\nPython history\n--------------\n_Information was originally taken from wikipedia, content was adjusted for current format_\n\n### 1980’s:\nPython was conceived by the Dutch Guido van Rossum while he was at CWI (Centrum Wiskunde & Informatica - English: \"National Research Institute for Mathematics and Computer Science\").\nVan Rossum is Python's principal author, and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community, Benevolent Dictator for Life (BDFL).  However, van Rossum stepped down as leader on July 12, 2018.\n\nPython was designed as a successor to CWIs ABC programming language capable of exception handling and interfacing with the Amoeba operating system\nvan Rossum started the implementation of Python in 1989. \n\n> Fun fact: Python was named for the BBC TV show Monty Python's Flying Circus\n\n### 1990's:\nIn February 1991, Van Rossum published the code (labeled version 0.9.0) to alt.sources.\nAlready present at this stage in development were classes with inheritance, exception handling, functions, and the core datatypes of list, dict, str and so on. Also in this initial release was a module system borrowed from Modula-3; Van Rossum describes the module as \"one of Python's major programming units\". Python's exception model also resembles Modula-3's, with the addition of an else clause.\n\nPython reached version 1.0 in January 1994. The major new features included in this release were the functional programming tools lambda, map, filter and reduce. Van Rossum stated that \"Python acquired lambda, reduce(), filter() and map(), courtesy of a Lisp hacker who missed them and submitted working patches\". Also 1994 comp.lang.python, the primary discussion forum for Python, was formed, marking a milestone in the growth of Python's userbase.\n\n### 2000's:\nBetween 2000 and 2010 several version of Python 2.x were released.\n\n * October 2000 saw the release of Python 2.0. It introduced a _garbage collection system_ capable of collecting reference cycles, as well as _list comprehensions_ - a feature borrowed from the functional programming languages SETL and Haskell. Python's syntax for this construct is actually very similar to Haskell's, apart from Haskell's preference for punctuation characters and Python's preference for alphabetic keywords.\n\n * On March 6, 2001 _The Python Software Foundation (PSF)_ was launched. This is an American nonprofit organization devoted to the Python programming language, modelled after the Apache Software Foundation. All code, documentation and specifications added, from the time of Python 2.1's alpha release onward, is now owned by the Python Software Foundation (PSF).\n\n * Python 2.1 was released in 2001 on  April 15. Python 2.1 was close to Python 1.6.1, as well as Python 2.0.\n\n * Python 2.2 was released in December 2001; a major innovation was the unification of Python's types (types written in C) and classes (types written in Python) into one hierarchy. This single unification made Python's object model purely and consistently object oriented. Also added were generators which were inspired by Icon. This release included a change to the language specification to support nested scopes, like other statically scoped languages.\n\n * Python 2.5 was released in September 2006 and introduced the with statement, which encloses a code block within a context manager, allowing Resource Acquisition Is Initialization (RAII)-like behavior and replacing a common try/finally idiom.\n\n * 2008 marks a significant milestone, as Python 3.0 (also called \"Python 3000\" or \"Py3K\") was released on December 3, 2008. It was designed to rectify fundamental design flaws in the language — the changes required could not be implemented while retaining full backwards compatibility with the 2.x series, which necessitated a new major version number. \n\n * Python 2.6 was released on October 1, 2008 to coincide with Python 3.0 (released two months later on 2008-12-03), and included some features from that release, as well as a \"warnings\" mode that highlighted the use of features that were removed in Python 3.0.\n\n### 2010's:\nSimilarly, Python 2.7 (released July 3th, 2010) coincided with and included features from Python 3.1, which was released on June 26, 2009. Parallel 2.x and 3.x releases then ceased, and Python 2.7 was the last release in the 2.x series.\n\nIn November 2014, it was announced that Python 2.7 would be supported until 2020, but users were encouraged to move to Python 3 as soon as possible. Python 2.7 support ended on January 1, 2020, along with code freeze of 2.7 development branch. A final release, 2.7.18, occurred on April 20, 2020, and included fixes for critical bugs and release blockers. This marks the end-of-life of Python 2.\n\n\nPython 2 vs Python 3\n--------------\n\nPython 3.0 was released on December 3, 2008. It was designed to rectify fundamental design flaws in the language. The guiding principle of Python 3 was: \"reduce feature duplication by removing old ways of doing things\". Python 3.0 was developed with the same philosophy as in prior versions. However, as Python had accumulated new and redundant ways to program the same task, Python 3.0 had an emphasis on removing duplicative constructs and modules, in keeping with \"There should be one— and preferably only one —obvious way to do it\".\n\nNonetheless, Python 3.0 remained a multi-paradigm language. Coders could still follow object-oriented, structured, and functional programming paradigms, among others, but within such broad choices, the details were intended to be more obvious in Python 3.0 than they were in Python 2.x.\n\n### Compatibility\nPython 3.0 broke backward compatibility, and much Python 2 code does not run unmodified on Python 3. Python's dynamic typing combined with the plans to change the semantics of certain methods of dictionaries, for example, made perfect mechanical translation from Python 2.x to Python 3.0 very difficult. \n\n### Features\nSome of the major changes included for Python 3.0 were:\n\n * Changing print so that it is a built-in function, not a statement.  \n   This made it easier to change a module to use a different print function, as well as making the syntax more regular. In Python 2.6 and 2.7, `print()` is available as a builtin but is masked by the print statement syntax, which can be disabled by entering `from __future__ import print_function` at the top of the file\n\n * Removal of the Python 2 `input` function, and the renaming of the `raw_input` function to `input`. Python 3's `input` function behaves like Python 2's `raw_input` function, in that the input is always returned as a string rather than being evaluated as an expression\n\n * Moving `reduce` (but not `map` or `filter`) out of the built-in namespace and into `functools`. The rationale being code that uses reduce is less readable than code that uses a for loop and accumulator variable\n\n * Adding support for optional function annotations that can be used for informal type declarations or other purposes\n\n * Unifying the str/unicode types, representing text, and introducing a separate immutable `bytes` type; and a mostly corresponding mutable `bytearray` type, both of which represent arrays of bytes\n\n * Removing backward-compatibility features, including old-style classes, string exceptions, and implicit relative imports\n\n * A change in integer division functionality: in Python 2, `5 / 2` is `2`; in Python 3, `5 / 2` is `2.5`. (In both Python 2 (2.2 onwards) and Python 3, a separate operator exists to provide the old behavior: `5 // 2` is 2)\n\nSubsequent releases in the Python 3.x series have included additional, substantial new features; all ongoing development of the language is done in the 3.x series.\nAs of "
    },
    {
      "name" : "README.md",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "# level-up-with-python\n\nIntroductory course to Python. \n\nContent is taken and inspired by JetBrains Academy content with some slight \ncustomizations.\n"
    },
    {
      "name" : "03_Strings/In operator/in_operator.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "ice_cream = \"ice cream\"\nprint(\"cream\" in ice_cream)    # print boolean result directly\n\ncontains = type here\nprint(contains)\n"
    },
    {
      "name" : "03_Strings/Concatenation/concatenation.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "hello = \"Hello\"\nworld = 'World'\n\nhello_world = type here\nprint(hello_world)      # Note: you should print \"Hello World\"\n"
    },
    {
      "name" : "03_Strings/String length/len_function.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "phrase = \"\"\"\nIt is a really long string\ntriple-quoted strings are used\nto define multi-line strings\n\"\"\"\nfirst_half = type here\nprint(first_half)\n"
    },
    {
      "name" : "03_Strings/String slicing/slicing.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "monty_python = \"Monty Python\"\nmonty = monty_python[:5]      # one or both index could be dropped. monty_python[:5] is equal to monty_python[0:5]\nprint(monty)\npython = type here\nprint(python)\n"
    },
    {
      "name" : "03_Strings/String indexing/string_indexing.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "python = \"Python\"\nprint(\"h \" + python[3])     # Note: string indexing starts with 0\n\np_letter = type here\nprint(p_letter)\n"
    },
    {
      "name" : "03_Strings/String formatting/string_formatting.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "name = \"John\"\nprint(\"Hello, PyCharm! My name is %s!\" % name)     # Note: %s is inside the string, % is after the string\n\nprint(\"I'm special symbol years old\" % years)\n"
    },
    {
      "name" : "03_Strings/Character escaping/character_escaping.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "dont_worry = \"Don't worry about apostrophes\"\nprint(dont_worry)\nprint(\"\\\"Sweet\\\" is an ice-cream\")\nprint('text')\n"
    },
    {
      "name" : "03_Strings/Basic string methods/string_methods.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "monty_python = \"Monty Python\"\nprint(monty_python)\n\nprint(monty_python.lower())    # print lower-cased version of the string\n\nprint(upper cased monty_python)\n"
    },
    {
      "name" : "03_Strings/String multiplication/string_multiplication.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "hello = \"hello\"\nten_of_hellos = hello operator 10\nprint(ten_of_hellos)\n"
    },
    {
      "name" : "03_Strings/String negative indexing/negative_indexing.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "long_string = \"This is a very long string!\"\nexclamation = type here\nprint(exclamation)\n"
    },
    {
      "name" : "__init__.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : ""
    },
    {
      "name" : "02_Variables/Assignments/assignments.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "number = 9.0\nprint(\"number = \" + str(number))\n\nnumber -= 2\nprint(\"number = \" + str(number))\n\nnumber operator 5\n\nprint(\"number = \" + str(number))\n"
    },
    {
      "name" : "02_Variables/Variable types/variable_type.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "## Variable types\n\nnumber = 9\nprint(type(number))   # print type of variable \"number\"\n\nfloat_number = 9.0\nprint(float_number type)\n"
    },
    {
      "name" : "02_Variables/Type conversion/type_cast.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "number = 9\nprint(type(number))   # print type of variable \"number\"\n\nfloat_number = 9.0\nprint(float_number)\nprint(Convert float_number to integer)\n"
    },
    {
      "name" : "02_Variables/Boolean operators/boolean_operators.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "two = 2\nthree = 3\n\nis_equal = two operator three\n\nprint(is_equal)\n"
    },
    {
      "name" : "02_Variables/Undefined variable/undefined_variable.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "variable = 1\nprint(other variable)\n"
    },
    {
      "name" : "02_Variables/Variable definition/variable_definition.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "a = b = 2  # This is called a \"chained assignment\". It assigns the value 2 to variables \"a\" and \"b\".\nprint(\"a = \" + str(a))   # We'll explain the expression str(a) later in the course. For now it is used to convert the  variable \"a\" to a string.\nprint(\"b = \" + str(b))\n\ngreetings = \"greetings\"\nprint(\"greetings = \" + str(greetings))\ngreetings = another value\nprint(\"greetings = \" + str(greetings))\n"
    },
    {
      "name" : "02_Variables/Arithmetic operators/arithmetic_operators.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "number = 9.0        # float number\n\nresult = divide 'number' by two\n\nremainder = calculate the remainder\n\nprint(\"result = \" + str(result))\nprint(\"remainder = \" + str(remainder))\n"
    },
    {
      "name" : "02_Variables/Comparison operators/comparison_operators.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "one = 1\ntwo = 2\nthree = 3\n\nprint(one < two < three)  # This chained comparison means that the (one < two) and (two < three) comparisons are performed at the same time.\n\nis_greater = three operator two\nprint(is_greater)\n"
    },
    {
      "name" : "test_helper.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import sys\n\n\ndef get_file_text(path):\n    \"\"\" Returns file text by path\"\"\"\n    file_io = open(path, \"r\")\n    text = file_io.read()\n    file_io.close()\n    return text\n\n\ndef get_file_output(encoding=\"utf-8\", path=sys.argv[-1], arg_string=\"\"):\n    \"\"\"\n    Returns answer file output\n    :param encoding: to decode output in python3\n    :param path: path of file to execute\n    :return: list of strings\n    \"\"\"\n    import subprocess\n\n    proc = subprocess.Popen([sys.executable, path], stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                            stderr=subprocess.STDOUT)\n    if arg_string:\n        for arg in arg_string.split(\"\\n\"):\n            proc.stdin.write(bytearray(str(arg) + \"\\n\", encoding))\n            proc.stdin.flush()\n\n    return list(map(lambda x: str(x.decode(encoding)), proc.communicate()[0].splitlines()))\n\n\ndef test_file_importable():\n    \"\"\" Tests there is no obvious syntax errors\"\"\"\n    path = sys.argv[-1]\n    if not path.endswith(\".py\"):\n        import os\n\n        parent = os.path.abspath(os.path.join(path, os.pardir))\n        python_files = [f for f in os.listdir(parent) if os.path.isfile(os.path.join(parent, f)) and f.endswith(\".py\")]\n        for python_file in python_files:\n            if python_file == \"tests.py\":\n                continue\n            check_importable_path(os.path.join(parent, python_file))\n        return\n    check_importable_path(path)\n\n\ndef check_importable_path(path):\n    \"\"\" Checks that file is importable.\n        Reports failure otherwise.\n    \"\"\"\n    saved_input = patch_input()\n    try:\n        import_file(path)\n    except:\n        failed(\"The file contains syntax errors\", test_file_importable.__name__)\n        return\n    finally:\n        revert_input(saved_input)\n\n    passed(test_file_importable.__name__)\n\n\ndef patch_input():\n    def mock_fun(_m=\"\"):\n        return \"mock\"\n\n    if sys.version_info[0] == 3:\n        import builtins\n        save_input = builtins.input\n        builtins.input = mock_fun\n        return save_input\n    elif sys.version_info[0] == 2:\n        import __builtin__\n        save_input = __builtin__.raw_input\n        __builtin__.raw_input = mock_fun\n        __builtin__.input = mock_fun\n        return save_input\n\n\ndef revert_input(saved_input):\n    if sys.version_info[0] == 3:\n        import builtins\n        builtins.input = saved_input\n    elif sys.version_info[0] == 2:\n        import __builtin__\n        __builtin__.raw_input = saved_input\n        __builtin__.input = saved_input\n\n\ndef import_file(path):\n    \"\"\" Returns imported file \"\"\"\n    if sys.version_info[0] == 2 or sys.version_info[1] < 3:\n        import imp\n\n        return imp.load_source(\"tmp\", path)\n    elif sys.version_info[0] == 3:\n        import importlib.machinery\n\n        return importlib.machinery.SourceFileLoader(\"tmp\", path).load_module(\"tmp\")\n\n\ndef import_task_file():\n    \"\"\" Returns imported file.\n        Imports file from which check action was run\n    \"\"\"\n    path = sys.argv[-1]\n    return import_file(path)\n\n\ndef test_is_not_empty():\n    \"\"\"\n        Checks that file is not empty\n    \"\"\"\n    path = sys.argv[-1]\n    file_text = get_file_text(path)\n\n    if len(file_text) > 0:\n        passed()\n    else:\n        failed(\"The file is empty. Please, reload the task and try again.\")\n\n\ndef test_text_equals(text, error_text):\n    \"\"\"\n        Checks that answer equals text.\n    \"\"\"\n    path = sys.argv[-1]\n    file_text = get_file_text(path)\n\n    if file_text.strip() == text:\n        passed()\n    else:\n        failed(error_text)\n\n\ndef test_answer_placeholders_text_deleted(error_text=\"Don't just delete task text\"):\n    \"\"\"\n        Checks that all answer placeholders are not empty\n    \"\"\"\n    windows = get_answer_placeholders()\n\n    for window in windows:\n        if len(window) == 0:\n            failed(error_text)\n            return\n    passed()\n\n\ndef set_congratulation_message(message):\n    \"\"\" Overrides default 'Congratulations!' message \"\"\"\n    print(\"#educational_plugin CONGRATS_MESSAGE \" + message)\n\n\ndef failed(message=\"Please, reload the task and try again.\", name=None):\n    \"\"\" Reports failure \"\"\"\n    if not name:\n        name = sys._getframe().f_back.f_code.co_name\n    full_message = name + \" FAILED + \" + message\n    lines = full_message.splitlines()\n    for line in lines:\n        print(\"#educational_plugin \" + line)\n\n\ndef passed(name=None):\n    \"\"\" Reports success \"\"\"\n    if not name:\n        name = sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" test OK\")\n\n\ndef get_answer_placeholders():\n    \"\"\"\n        Returns all answer placeholders text\n    \"\"\"\n    prefix = \"#educational_plugin_window = \"\n    path = sys.argv[-1]\n    import os\n\n    file_name_without_extension = os.path.splitext(path)[0]\n    windows_path = file_name_without_extension + \"_windows\"\n    windows = []\n    f = open(windows_path, \"r\")\n    window_text = \"\"\n    first = True\n    for line in f.readlines():\n        if line.startswith(prefix):\n            if not first:\n                windows.append(window_text.strip())\n            else:\n                first = False\n            window_text = line[len(prefix):]\n        else:\n            window_text += line\n\n    if window_text:\n        windows.append(window_text.strip())\n\n    f.close()\n    return windows\n\n\ndef check_samples(samples=()):\n    \"\"\"\n      Check script output for all samples. Sample is a two element list, where the first is input and\n      the second is output.\n    \"\"\"\n    for sample in samples:\n        if len(sample) == 2:\n            output = get_file_output(arg_string=str(sample[0]))\n            if \"\\n\".join(output) != sample[1]:\n                failed(\n                    \"Test from samples failed: \\n \\n\"\n                    \"Input:\\n{}\"\n                    \"\\n \\n\"\n                    \"Expected:\\n{}\"\n                    \"\\n \\n\"\n                    \"Your result:\\n{}\".format(str.strip(sample[0]), str.strip(sample[1]), \"\\n\".join(output)))\n                return\n        set_congratulation_message(\"All test from samples passed. Now we are checking your solution on Stepik server.\")\n\n    passed()\n\n\ndef run_common_tests(error_text=\"Please, reload file and try again\"):\n    test_is_not_empty()\n    test_answer_placeholders_text_deleted()\n    test_file_importable()\n"
    },
    {
      "name" : "04_Data_structures/Tuples/tuples.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "alphabet = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n\nprint(alphabet length)\n"
    },
    {
      "name" : "04_Data_structures/In keyword/in_keyword.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "grocery_list = [\"fish\", \"tomato\", \"apples\"]   # create new list\n\nprint(\"tomato\" in grocery_list)    # check that grocery_list contains \"tomato\" item\n\ngrocery_dict = {\"fish\": 1, \"tomato\": 6, \"apples\": 3}   # create new dictionary\n\nprint(is 'fish' in grocery_dict keys)\n"
    },
    {
      "name" : "04_Data_structures/List items/list_items.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "animals = [\"elephant\", \"lion\", \"tiger\", \"giraffe\", \"monkey\", \"dog\"]  # create new list\nprint(animals)\n\nanimals[1:3] = [\"cat\"]    # replace 2 items -- \"lion\" and \"tiger\" with one item -- \"cat\"\nprint(animals)\n\nanimals[1:3] = []     # remove 2 items -- \"cat\" and \"giraffe\" from the list\nprint(animals)\n\nclear list\nprint(animals)\n"
    },
    {
      "name" : "04_Data_structures/Dictionaries/dicts.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "# create new dictionary.\nphone_book = {\"John\": 123, \"Jane\": 234, \"Jerard\": 345}    # \"John\", \"Jane\" and \"Jerard\" are keys and numbers are values\nprint(phone_book)\n\n# Add new item to the dictionary\nphone_book[\"Jill\"] = 345\nprint(phone_book)\n\n# Remove key-value pair from phone_book\ndel phone_book [\"John\"]\n\nprint(Jane's phone)\n"
    },
    {
      "name" : "04_Data_structures/Lists operations/list_operations.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "animals = [\"elephant\", \"lion\", \"tiger\", \"giraffe\"]  # create new list\nprint(animals)\n\nanimals += [\"monkey\", \"dog\"]    # add two items to the list\nprint(animals)\n\nanimals.append(\"dino\")   # add one more item to the list using append() method\nprint(animals)\n\nreplace \"dino\" with \"dinosaur\"\nprint(animals)\n"
    },
    {
      "name" : "04_Data_structures/Lists introduction/lists.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "squares = [1, 4, 9, 16, 25]   # create new list\nprint(squares)\n\nprint(slice)\n"
    },
    {
      "name" : "04_Data_structures/Dictionary keys() and values()/dict_key_value.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "phone_book = {\"John\": 123, \"Jane\": 234, \"Jerard\": 345}  # create new dictionary\nprint(phone_book)\n\n# Add new item to the dictionary\nphone_book[\"Jill\"] = 456\nprint(phone_book)\n\nprint(phone_book.keys())\n\nprint(phone_book values)\n"
    },
    {
      "name" : "05_Condition_expressions/If statement/if_statement.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "name = \"John\"\nage = 17\n\nif name == \"John\" or age == 17:   # check that name is \"John\" or age is 17. If so print next 2 lines.\n    print(\"name is John\")\n    print(\"John is 17 years old\")\n\ntasks = [\"task1\", \"task2\"]    # create new list\n\ncheck if 'tasks' is empty\n    print(\"empty\")\n"
    },
    {
      "name" : "05_Condition_expressions/Boolean operators/boolean_operators.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "name = \"John\"\nage = 17\n\nprint(name == \"John\" or age == 17)    # checks that either name equals to \"John\" OR age equals to 17\n\nprint(John is not 23 years old)\n"
    },
    {
      "name" : "05_Condition_expressions/Boolean operators order/boolean_order.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "name = \"John\"\nage = 17\n\nprint(name == \"John\" or not age > 17)\n\nprint(name == \"John\" or not age > 17)\n\nprint(\"name\" is \"Ellis\" or not (\"name\" equal \"John\" and he is 17 years old))\n"
    },
    {
      "name" : "05_Condition_expressions/Else, elif part in if statement/else_elif.py",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "x = 28\n\nif x < 0:\n    print('x < 0')                      # executes only if x < 0\nelif x == 0:\n    print('x is zero')                 # if it's not true that x < 0, check if x == 0\nelif x == 1:\n    print('x == 1')                    # if it's not true that x < 0 and x != 0, check if x == 1\nelse:\n    print('non of the above is true')\n\nname = \"John\"\n\ncheck if name equal to \"John\"\n    print(True)\notherwise\n    print(False)\n"
    }
  ],
  "version" : 11
}